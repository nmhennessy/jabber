/*
	A basic extension of the java.applet.Applet class
 */

import java.awt.*;
import java.applet.*;

public class jabber extends Applet implements Runnable
{
    Graphics offGrfx;
    Image    offImage;
    Thread   animate;
    JabberSpriteVector jv;
    Font font, tempfont;
    int origin_x, origin_y;
    int delay = 60; //12 fps
    FontMetrics fm, tempfm;
    java.util.Random random;
    private static final int MAGNITUDE = 10;  //Note this value in JSVector
    int state;
    private static final int JABBER = 0;
    private static final int OUTPUT = 1;
    private static final int LOADING = 2;
    java.awt.TextArea outputText;

    One_letter_frequency oneLetFreq;
    Two_letter_frequency twoLetFreq;
    Three_letter_frequency threeLetFreq;
    Three_letter_frequency_rev threeLetFreqRev;
    Three_letter_frequency_beg threeLetFreqBeg;
    Three_letter_frequency_end threeLetFreqEnd;
	
	public void init()
	{
	    state = LOADING;
		// Take out this line if you don't use symantec.itools.net.RelativeURL or symantec.itools.awt.util.StatusScroller
	
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.white);
		setSize(400,400);
		//}}
		
		//Non-symantec stuff
		font = new Font("Courier", Font.BOLD, 18);
		fm = this.getFontMetrics(font);
        random = new java.util.Random();
        oneLetFreq = new One_letter_frequency();
        twoLetFreq = new Two_letter_frequency();
        threeLetFreq = new Three_letter_frequency();
        threeLetFreqRev = new Three_letter_frequency_rev();
        threeLetFreqBeg = new Three_letter_frequency_beg();
        threeLetFreqEnd = new Three_letter_frequency_end();
        jv = new JabberSpriteVector(250, 10, this, oneLetFreq, twoLetFreq, threeLetFreq, threeLetFreqRev, threeLetFreqBeg, threeLetFreqEnd, font);
        jv.initializer();
        state = JABBER;
	
		//{{REGISTER_LISTENERS
		//}}
	}
	
	//{{DECLARE_CONTROLS
	//}}
	
	public void start() {
	    if (animate == null) {
	        animate = new Thread(this);
	        animate.start();
	    } //if
	} //start
	
	public void stop() {
	    if (animate != null) {
	        animate = null;
	    } //if
	} //stop
	
	public void paint(Graphics g) {
	    if (state == LOADING) {
    	    tempfont = new Font("Helvetica", Font.PLAIN, 18);
	        FontMetrics tempfm = g.getFontMetrics(tempfont);
	        String str = new String("Loading Lexicon...");
	        g.setFont(tempfont);
	        g.drawString(str, (getSize().width- tempfm.stringWidth(str)) / 2, ((getSize().height- tempfm.getHeight()) / 2) + tempfm.getAscent());
	    }//if
	}//paint
	
	public void run() {
	    while (state == LOADING) {
	    }
        long t = System.currentTimeMillis();
        long last_reset = t;
        while (Thread.currentThread() == animate) {
            if (t - last_reset >= 60000) {
                last_reset = t;
                jv.initializer();
            }
            jv.update();
            repaint();
            try {
                t += delay;
                Thread.sleep(Math.max(0, t - System.currentTimeMillis()));
            }
            catch (InterruptedException e) {
                break;
            } //try
        } //while
	} //run

	public void update(Graphics g) {
	    //Create off graphics
	    Dimension dim = getSize();
	    if (offGrfx == null) {
	        offImage = createImage(dim.width, dim.height);
	        offGrfx = offImage.getGraphics();
	    } //if
	    jv.draw(offGrfx);
	    g.drawImage(offImage, 0, 0, null);
    } //update

} //jabber